stages:
  - build
  - verify
  - deploy

variables:
  AWS_S3_BUCKET: ""
  BUILD_ENV: ""
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task

build:
  stage: build
  image: node:20
  script:
    - if [ "$CI_COMMIT_BRANCH" == "main" ]; then export BUILD_CMD=build; elif [ "$CI_COMMIT_BRANCH" == "staging" ]; then export BUILD_CMD=build_staging; else export BUILD_CMD=build_develop; fi
    - echo "Building for the $NODE_ENV environment...."
    - npm run $BUILD_CMD
  artifacts:
    paths:
      - dist/
  only:
    - main
    - develop
    - staging
  before_script:
    - npm install

sonar-scanner:
  stage: verify
  image: sonarsource/sonar-scanner-cli:11
  
  cache:
    policy: pull-push
    key: "sonar-cache-$CI_COMMIT_REF_SLUG"
    paths:
      - "${SONAR_USER_HOME}/cache"
      - sonar-scanner/
      
  script: 
    - sonar-scanner -Dsonar.host.url="${SONAR_HOST_URL}"
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_BRANCH == 'develop'

lint:
  stage: verify
  image: node:20
  script:
    - npm run lint
  allow_failure: true
  before_script:
    - npm install

audit:
  stage: verify
  image: node:20
  script:
    - npm audit
  before_script:
    - npm install

deploy:
  stage: deploy
  image: amazon/aws-cli:latest
  script:
    - if [ "$CI_COMMIT_BRANCH" == "main" ]; then export AWS_S3_BUCKET=geotab.link-labs.com; elif [ "$CI_COMMIT_BRANCH" == "staging" ]; then export AWS_S3_BUCKET=dev-geotab.link-labs.com; else export AWS_S3_BUCKET=dev-geotab.link-labs.com; fi
    - if [ "$CI_COMMIT_BRANCH" == "main" ]; then export AWS_S3_OPTS=""; else export AWS_S3_OPTS=""; fi
    - echo "Deploying to $AWS_S3_BUCKET with $AWS_S3_OPTS..." 
    - aws s3 sync dist/ s3://$AWS_S3_BUCKET $AWS_S3_OPTS --delete --acl public-read
  only:
    - main
    # - develop # NOTE: Staging is using the DEV bucket at the moment.
    - staging
  environment:
    name: $CI_COMMIT_BRANCH
  before_script:
    - echo "Setting up AWS credentials"
    - mkdir -p ~/.aws
    - echo "[default]" > ~/.aws/credentials
    - echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
    - echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
    - echo "[default]" > ~/.aws/config
    - echo "region = $AWS_DEFAULT_REGION" >> ~/.aws/config
